(function(){const l=document.createElement("link").relList;if(l&&l.supports&&l.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))c(o);new MutationObserver(o=>{for(const r of o)if(r.type==="childList")for(const a of r.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&c(a)}).observe(document,{childList:!0,subtree:!0});function u(o){const r={};return o.integrity&&(r.integrity=o.integrity),o.referrerPolicy&&(r.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?r.credentials="include":o.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function c(o){if(o.ep)return;o.ep=!0;const r=u(o);fetch(o.href,r)}})();var p=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},L={exports:{}};(function(i,l){(function(u,c){c()})(p,function(){function u(e,t){return typeof t>"u"?t={autoBom:!1}:typeof t!="object"&&(console.warn("Deprecated: Expected third argument to be a object"),t={autoBom:!t}),t.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)?new Blob(["\uFEFF",e],{type:e.type}):e}function c(e,t,d){var n=new XMLHttpRequest;n.open("GET",e),n.responseType="blob",n.onload=function(){v(n.response,t,d)},n.onerror=function(){console.error("could not download file")},n.send()}function o(e){var t=new XMLHttpRequest;t.open("HEAD",e,!1);try{t.send()}catch{}return 200<=t.status&&299>=t.status}function r(e){try{e.dispatchEvent(new MouseEvent("click"))}catch{var t=document.createEvent("MouseEvents");t.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),e.dispatchEvent(t)}}var a=typeof window=="object"&&window.window===window?window:typeof self=="object"&&self.self===self?self:typeof p=="object"&&p.global===p?p:void 0,E=a.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),v=a.saveAs||(typeof window!="object"||window!==a?function(){}:"download"in HTMLAnchorElement.prototype&&!E?function(e,t,d){var n=a.URL||a.webkitURL,s=document.createElement("a");t=t||e.name||"download",s.download=t,s.rel="noopener",typeof e=="string"?(s.href=e,s.origin===location.origin?r(s):o(s.href)?c(e,t,d):r(s,s.target="_blank")):(s.href=n.createObjectURL(e),setTimeout(function(){n.revokeObjectURL(s.href)},4e4),setTimeout(function(){r(s)},0))}:"msSaveOrOpenBlob"in navigator?function(e,t,d){if(t=t||e.name||"download",typeof e!="string")navigator.msSaveOrOpenBlob(u(e,d),t);else if(o(e))c(e,t,d);else{var n=document.createElement("a");n.href=e,n.target="_blank",setTimeout(function(){r(n)})}}:function(e,t,d,n){if(n=n||open("","_blank"),n&&(n.document.title=n.document.body.innerText="downloading..."),typeof e=="string")return c(e,t,d);var s=e.type==="application/octet-stream",O=/constructor/i.test(a.HTMLElement)||a.safari,g=/CriOS\/[\d]+/.test(navigator.userAgent);if((g||s&&O||E)&&typeof FileReader<"u"){var y=new FileReader;y.onloadend=function(){var f=y.result;f=g?f:f.replace(/^data:[^;]*;/,"data:attachment/file;"),n?n.location.href=f:location=f,n=null},y.readAsDataURL(e)}else{var b=a.URL||a.webkitURL,w=b.createObjectURL(e);n?n.location=w:location.href=w,n=null,setTimeout(function(){b.revokeObjectURL(w)},4e4)}});a.saveAs=v.saveAs=v,i.exports=v})})(L);var j=L.exports;let m=null,h=null;document.getElementById("fileInput").addEventListener("change",i=>{m=i.target.files[0],document.getElementById("fileName").textContent=m?m.name:"No file selected"});document.querySelectorAll(".conversion-btn").forEach(i=>{i.addEventListener("click",()=>{document.querySelectorAll(".conversion-btn").forEach(l=>l.classList.remove("active")),i.classList.add("active"),h=i.id})});document.getElementById("startBtn").addEventListener("click",async()=>{if(!m){alert("No file selected");return}if(!h){alert("Please select a conversion type");return}try{const i=new FormData;i.append("file",m),i.append("conversionType",h);const l=await fetch("/api/convert",{method:"POST",body:i,headers:{Accept:"application/json"}}),u=l.headers.get("content-type");if(!u||!u.includes("application/json")){const o=await l.text();throw new Error(`Expected JSON but got: ${o.substring(0,100)}`)}const c=await l.json();j.saveAs(new Blob([c.data]),`converted.${c.extension}`)}catch(i){console.error("Conversion error:",i),alert(`Conversion failed: ${i.message}`)}});
